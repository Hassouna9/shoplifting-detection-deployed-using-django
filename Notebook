{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[],"dockerImageVersionId":30775,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install gdown\nimport gdown\n!gdown --id 1VlVPAi9gaBEkE6eM2arWbT6mXBQM8sRf","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-11T14:27:55.232970Z","iopub.execute_input":"2024-10-11T14:27:55.233246Z","iopub.status.idle":"2024-10-11T14:28:38.400478Z","shell.execute_reply.started":"2024-10-11T14:27:55.233214Z","shell.execute_reply":"2024-10-11T14:28:38.399392Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Collecting gdown\n  Downloading gdown-5.2.0-py3-none-any.whl.metadata (5.8 kB)\nRequirement already satisfied: beautifulsoup4 in /opt/conda/lib/python3.10/site-packages (from gdown) (4.12.3)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from gdown) (3.15.1)\nRequirement already satisfied: requests[socks] in /opt/conda/lib/python3.10/site-packages (from gdown) (2.32.3)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from gdown) (4.66.4)\nRequirement already satisfied: soupsieve>1.2 in /opt/conda/lib/python3.10/site-packages (from beautifulsoup4->gdown) (2.5)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests[socks]->gdown) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests[socks]->gdown) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests[socks]->gdown) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests[socks]->gdown) (2024.8.30)\nRequirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /opt/conda/lib/python3.10/site-packages (from requests[socks]->gdown) (1.7.1)\nDownloading gdown-5.2.0-py3-none-any.whl (18 kB)\nInstalling collected packages: gdown\nSuccessfully installed gdown-5.2.0\n/opt/conda/lib/python3.10/site-packages/gdown/__main__.py:140: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don't need to pass it anymore to use a file ID.\n  warnings.warn(\nDownloading...\nFrom (original): https://drive.google.com/uc?id=1VlVPAi9gaBEkE6eM2arWbT6mXBQM8sRf\nFrom (redirected): https://drive.google.com/uc?id=1VlVPAi9gaBEkE6eM2arWbT6mXBQM8sRf&confirm=t&uuid=ef580db4-7484-4de2-815d-7f5d7db31ffa\nTo: /kaggle/working/Copy of Shop DataSet.zip\n100%|██████████████████████████████████████| 1.78G/1.78G [00:24<00:00, 73.3MB/s]\n","output_type":"stream"}]},{"cell_type":"code","source":"import os\nimport pandas as pd\nimport numpy as np\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\nimport torchvision.transforms as transforms\nimport torchvision.models as models\nimport cv2\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nfrom sklearn.utils import class_weight\n\nimport zipfile\nwith zipfile.ZipFile('/kaggle/working/Copy of Shop DataSet.zip', 'r') as zip_ref:\n    zip_ref.extractall()\n\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:38.402448Z","iopub.execute_input":"2024-10-11T14:28:38.403109Z","iopub.status.idle":"2024-10-11T14:28:50.945666Z","shell.execute_reply.started":"2024-10-11T14:28:38.403071Z","shell.execute_reply":"2024-10-11T14:28:50.944657Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"def create_csv_from_filenames_pandas(root_directory, output_csv):\n    data = {'video_path': [], 'label': []}\n    \n    # Loop over files in the directory\n    for filename in os.listdir(root_directory):\n        video_path = os.path.join(root_directory, filename)\n        data['video_path'].append(video_path)\n        label = os.path.basename(root_directory)\n        data['label'].append(label)\n    # Create a DataFrame\n    df = pd.DataFrame(data)\n\n    # Write DataFrame to CSV\n    df.to_csv(output_csv, index=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:50.946869Z","iopub.execute_input":"2024-10-11T14:28:50.947366Z","iopub.status.idle":"2024-10-11T14:28:50.954673Z","shell.execute_reply.started":"2024-10-11T14:28:50.947330Z","shell.execute_reply":"2024-10-11T14:28:50.953764Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"# Example usage:\n# Set the root directory where your files are stored\nroot_directory = '/kaggle/working/Shop DataSet/shop lifters'\n\n# Set the output CSV file name\noutput_csv = 'shop_lifters.csv'\n\n# Create the CSV\ncreate_csv_from_filenames_pandas(root_directory, output_csv)\n\nprint(f\"CSV file '{output_csv}' has been created successfully.\")","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:50.956808Z","iopub.execute_input":"2024-10-11T14:28:50.957125Z","iopub.status.idle":"2024-10-11T14:28:50.974390Z","shell.execute_reply.started":"2024-10-11T14:28:50.957092Z","shell.execute_reply":"2024-10-11T14:28:50.973577Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"CSV file 'shop_lifters.csv' has been created successfully.\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df = pd.read_csv('/kaggle/working/shop_lifters.csv')","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:50.975408Z","iopub.execute_input":"2024-10-11T14:28:50.975725Z","iopub.status.idle":"2024-10-11T14:28:50.984332Z","shell.execute_reply.started":"2024-10-11T14:28:50.975694Z","shell.execute_reply":"2024-10-11T14:28:50.983310Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"print(train_df.shape)\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:50.985553Z","iopub.execute_input":"2024-10-11T14:28:50.985842Z","iopub.status.idle":"2024-10-11T14:28:51.004411Z","shell.execute_reply.started":"2024-10-11T14:28:50.985810Z","shell.execute_reply":"2024-10-11T14:28:51.003545Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"(324, 2)\n","output_type":"stream"},{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"                                          video_path         label\n0  /kaggle/working/Shop DataSet/shop lifters/vide...  shop lifters\n1  /kaggle/working/Shop DataSet/shop lifters/shop...  shop lifters\n2  /kaggle/working/Shop DataSet/shop lifters/vide...  shop lifters\n3  /kaggle/working/Shop DataSet/shop lifters/shop...  shop lifters\n4  /kaggle/working/Shop DataSet/shop lifters/vide...  shop lifters","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>video_path</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>/kaggle/working/Shop DataSet/shop lifters/vide...</td>\n      <td>shop lifters</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>/kaggle/working/Shop DataSet/shop lifters/shop...</td>\n      <td>shop lifters</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>/kaggle/working/Shop DataSet/shop lifters/vide...</td>\n      <td>shop lifters</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>/kaggle/working/Shop DataSet/shop lifters/shop...</td>\n      <td>shop lifters</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>/kaggle/working/Shop DataSet/shop lifters/vide...</td>\n      <td>shop lifters</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Example usage:\n# Set the root directory where your files are stored\nroot_directory = '/kaggle/working/Shop DataSet/non shop lifters'\n\n# Set the output CSV file name\noutput_csv = 'non_shop_lifters.csv'\n\n# Create the CSV\ncreate_csv_from_filenames_pandas(root_directory, output_csv)\n\nprint(f\"CSV file '{output_csv}' has been created successfully.\")","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:51.005759Z","iopub.execute_input":"2024-10-11T14:28:51.006044Z","iopub.status.idle":"2024-10-11T14:28:51.017356Z","shell.execute_reply.started":"2024-10-11T14:28:51.006013Z","shell.execute_reply":"2024-10-11T14:28:51.016372Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"CSV file 'non_shop_lifters.csv' has been created successfully.\n","output_type":"stream"}]},{"cell_type":"code","source":"non_df = pd.read_csv('/kaggle/working/non_shop_lifters.csv')","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:51.018505Z","iopub.execute_input":"2024-10-11T14:28:51.018873Z","iopub.status.idle":"2024-10-11T14:28:51.025532Z","shell.execute_reply.started":"2024-10-11T14:28:51.018830Z","shell.execute_reply":"2024-10-11T14:28:51.024717Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"print(non_df.shape)\nnon_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:51.026688Z","iopub.execute_input":"2024-10-11T14:28:51.026993Z","iopub.status.idle":"2024-10-11T14:28:51.039473Z","shell.execute_reply.started":"2024-10-11T14:28:51.026961Z","shell.execute_reply":"2024-10-11T14:28:51.038564Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"(531, 2)\n","output_type":"stream"},{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"                                          video_path             label\n0  /kaggle/working/Shop DataSet/non shop lifters/...  non shop lifters\n1  /kaggle/working/Shop DataSet/non shop lifters/...  non shop lifters\n2  /kaggle/working/Shop DataSet/non shop lifters/...  non shop lifters\n3  /kaggle/working/Shop DataSet/non shop lifters/...  non shop lifters\n4  /kaggle/working/Shop DataSet/non shop lifters/...  non shop lifters","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>video_path</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>/kaggle/working/Shop DataSet/non shop lifters/...</td>\n      <td>non shop lifters</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>/kaggle/working/Shop DataSet/non shop lifters/...</td>\n      <td>non shop lifters</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>/kaggle/working/Shop DataSet/non shop lifters/...</td>\n      <td>non shop lifters</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>/kaggle/working/Shop DataSet/non shop lifters/...</td>\n      <td>non shop lifters</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>/kaggle/working/Shop DataSet/non shop lifters/...</td>\n      <td>non shop lifters</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\ndef split_csv(shop_lifters_csv, non_shop_lifters_csv, train_csv, test_csv):\n    df = pd.read_csv(shop_lifters_csv)\n\n    shop_lifter_train_df, shop_lifter_test_df = train_test_split(df, test_size=0.2, random_state=42)\n    \n    df = pd.read_csv(non_shop_lifters_csv)\n    non_shop_lifter_train_df, non_shop_lifter_test_df = train_test_split(df, test_size=0.2, random_state=42)\n    \n    train_df = pd.concat([shop_lifter_train_df, non_shop_lifter_train_df], ignore_index=True)\n    test_df = pd.concat([shop_lifter_test_df, non_shop_lifter_test_df], ignore_index=True)\n\n    train_df.to_csv(train_csv, index=False)\n    test_df.to_csv(test_csv, index=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:51.042814Z","iopub.execute_input":"2024-10-11T14:28:51.043142Z","iopub.status.idle":"2024-10-11T14:28:51.059678Z","shell.execute_reply.started":"2024-10-11T14:28:51.043108Z","shell.execute_reply":"2024-10-11T14:28:51.058952Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"split_csv('/kaggle/working/shop_lifters.csv', '/kaggle/working/non_shop_lifters.csv', 'train.csv', 'test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:51.060595Z","iopub.execute_input":"2024-10-11T14:28:51.060876Z","iopub.status.idle":"2024-10-11T14:28:51.077880Z","shell.execute_reply.started":"2024-10-11T14:28:51.060846Z","shell.execute_reply":"2024-10-11T14:28:51.077189Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"train_df = pd.read_csv('/kaggle/working/train.csv')\ntest_df = pd.read_csv('/kaggle/working/test.csv')\n\nprint(\"Training Data Sample:\")\nprint(train_df.head())\nprint(\"\\nTesting Data Sample:\")\nprint(test_df.head())\n\n\nprint(\"\\nTraining Data Class Distribution:\")\nprint(train_df['label'].value_counts())\nprint(\"\\nTesting Data Class Distribution:\")\nprint(test_df['label'].value_counts())\n\nlabel_mapping = {\n    'non shop lifters': 0,\n    'shop lifters': 1\n}\n\ntrain_df['label'] = train_df['label'].map(label_mapping)\ntest_df['label'] = test_df['label'].map(label_mapping)\n\n\nprint(\"Mapped Training Labels:\")\nprint(train_df['label'].unique())\n\nprint(\"Mapped Testing Labels:\")\nprint(test_df['label'].unique())","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:51.078969Z","iopub.execute_input":"2024-10-11T14:28:51.079356Z","iopub.status.idle":"2024-10-11T14:28:51.104594Z","shell.execute_reply.started":"2024-10-11T14:28:51.079310Z","shell.execute_reply":"2024-10-11T14:28:51.103721Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Training Data Sample:\n                                          video_path         label\n0  /kaggle/working/Shop DataSet/shop lifters/vide...  shop lifters\n1  /kaggle/working/Shop DataSet/shop lifters/shop...  shop lifters\n2  /kaggle/working/Shop DataSet/shop lifters/shop...  shop lifters\n3  /kaggle/working/Shop DataSet/shop lifters/shop...  shop lifters\n4  /kaggle/working/Shop DataSet/shop lifters/vide...  shop lifters\n\nTesting Data Sample:\n                                          video_path         label\n0  /kaggle/working/Shop DataSet/shop lifters/shop...  shop lifters\n1  /kaggle/working/Shop DataSet/shop lifters/shop...  shop lifters\n2  /kaggle/working/Shop DataSet/shop lifters/vide...  shop lifters\n3  /kaggle/working/Shop DataSet/shop lifters/vide...  shop lifters\n4  /kaggle/working/Shop DataSet/shop lifters/vide...  shop lifters\n\nTraining Data Class Distribution:\nlabel\nnon shop lifters    424\nshop lifters        259\nName: count, dtype: int64\n\nTesting Data Class Distribution:\nlabel\nnon shop lifters    107\nshop lifters         65\nName: count, dtype: int64\nMapped Training Labels:\n[1 0]\nMapped Testing Labels:\n[1 0]\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch\nimport numpy as np\n\n\nclass ShopliftingDataset(Dataset):\n    def __init__(self, dataframe, video_column='video_path', label_column='label', transform=None, max_frames=30, frames_per_video=16):\n        self.dataframe = dataframe.reset_index(drop=True)\n        self.transform = transform\n        self.video_column = video_column\n        self.label_column = label_column\n        self.max_frames = max_frames\n        self.frames_per_video = frames_per_video\n\n    def __len__(self):\n        return len(self.dataframe)\n\n    def __getitem__(self, idx):\n        video_path = self.dataframe.iloc[idx][self.video_column]\n        label = self.dataframe.iloc[idx][self.label_column]\n\n        frames = []\n\n        try:\n            cap = cv2.VideoCapture(video_path)\n            total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n            if total_frames >= self.frames_per_video:\n                frame_indices = np.linspace(0, total_frames - 1, self.frames_per_video, dtype=int)\n            else:\n                frame_indices = np.linspace(0, total_frames - 1, self.frames_per_video, dtype=int)\n            \n            current_frame = 0\n            sampled_frames = []\n            while True:\n                ret, frame = cap.read()\n                if not ret:\n                    break\n                if current_frame in frame_indices:\n                    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n                    frame = cv2.resize(frame, (224, 224))\n                    sampled_frames.append(frame)\n                current_frame += 1\n                if len(sampled_frames) == self.frames_per_video:\n                    break\n            cap.release()\n\n            while len(sampled_frames) < self.frames_per_video:\n                sampled_frames.append(sampled_frames[-1])\n\n            frames = np.stack(sampled_frames)\n            frames = frames.transpose((3, 0, 1, 2))  # (C, T, H, W)\n            frames = torch.FloatTensor(frames) / 255.0  # Normalize to [0,1]\n        except Exception as e:\n            print(f\"Error loading video {video_path}: {e}\")\n            frames = torch.zeros((3, self.frames_per_video, 224, 224))\n            label = 0  # Assign to 'non-shoplifting'\n\n        if self.transform:\n            frames = self.transform(frames)\n        try:\n            # Convert label to int first, then to torch.long tensor\n            label = torch.tensor(int(label), dtype=torch.long)\n        except (ValueError, TypeError) as e:\n            print(f\"Error converting label '{label}' at index {idx}: {e}\")\n            label = torch.tensor(0, dtype=torch.long)  # Default to 'non-shoplifting'\n\n        return frames, label","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:51.105701Z","iopub.execute_input":"2024-10-11T14:28:51.105980Z","iopub.status.idle":"2024-10-11T14:28:51.120398Z","shell.execute_reply.started":"2024-10-11T14:28:51.105950Z","shell.execute_reply":"2024-10-11T14:28:51.119553Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# import torch\n# from torch.utils.data import DataLoader\n# from tqdm import tqdm\n# import numpy as np\n\n\n# def compute_mean_std(dataset):\n\n#     loader = DataLoader(dataset, batch_size=1, shuffle=False, num_workers=4)\n    \n#     mean = 0.0\n#     std = 0.0\n#     total_samples = 0\n\n#     print(\"Computing mean and std...\")\n#     for data, _ in tqdm(loader):\n      \n#         data = data.squeeze(0)  \n#         C, T, H, W = data.shape\n#         data = data.view(C, -1) \n        \n#         mean += data.mean(1)\n#         std += data.std(1)\n#         total_samples += 1\n    \n#     mean /= total_samples\n#     std /= total_samples\n    \n#     mean = mean.tolist()\n#     std = std.tolist()\n    \n#     return mean, std\n\n# transform = None  \n# temp_dataset = ShopliftingDataset(dataframe=train_df, transform=transform, frames_per_video=16)\n\n\n# mean, std = compute_mean_std(temp_dataset)\n\n# print(f\"Computed Mean: {mean}\")\n# print(f\"Computed Std: {std}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:51.121591Z","iopub.execute_input":"2024-10-11T14:28:51.121909Z","iopub.status.idle":"2024-10-11T14:28:51.134270Z","shell.execute_reply.started":"2024-10-11T14:28:51.121868Z","shell.execute_reply":"2024-10-11T14:28:51.133469Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"class FrameTransform:\n    def __init__(self):\n        mean = [0.47670888900756836, 0.4601706266403198, 0.43789467215538025]\n        std = [0.19997993111610413, 0.22317750751972198, 0.26677823066711426]\n        self.normalize = transforms.Normalize(mean=mean,\n                                              std=std)\n\n    def __call__(self, frames):\n\n        C, T, H, W = frames.shape\n        # Permute to (T, C, H, W) to iterate over frames\n        frames = frames.permute(1, 0, 2, 3)\n        normalized_frames = []\n        for t in range(T):\n            frame = frames[t]\n            frame = self.normalize(frame)\n            normalized_frames.append(frame)\n            \n        # Stack back to (T, C, H, W)\n        frames = torch.stack(normalized_frames)\n        # Permute back to (C, T, H, W)\n        frames = frames.permute(1, 0, 2, 3)\n        return frames\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:51.135392Z","iopub.execute_input":"2024-10-11T14:28:51.135836Z","iopub.status.idle":"2024-10-11T14:28:51.144324Z","shell.execute_reply.started":"2024-10-11T14:28:51.135794Z","shell.execute_reply":"2024-10-11T14:28:51.143563Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"transform = FrameTransform()\n\n# Create Dataset instances with the updated transform\ntrain_dataset = ShopliftingDataset(\n    train_df, \n    video_column='video_path', \n    label_column='label', \n    transform=transform, \n    frames_per_video=16\n)\ntest_dataset = ShopliftingDataset(\n    test_df, \n    video_column='video_path', \n    label_column='label', \n    transform=transform, \n    frames_per_video=16\n)\n\n# Create DataLoaders\nbatch_size = 16  \nnum_workers = 4  \n\ntrain_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=num_workers, pin_memory=True)\ntest_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False, num_workers=num_workers, pin_memory=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:51.145384Z","iopub.execute_input":"2024-10-11T14:28:51.146167Z","iopub.status.idle":"2024-10-11T14:28:51.158049Z","shell.execute_reply.started":"2024-10-11T14:28:51.146122Z","shell.execute_reply":"2024-10-11T14:28:51.157150Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\n\nclass CNN_LSTM(nn.Module):\n    def __init__(self, num_classes=2, hidden_dim=256, num_layers=2, dropout=0.5):\n        super(CNN_LSTM, self).__init__()\n        \n        # -----------------------------\n        # CNN Architecture\n        # -----------------------------\n        self.cnn = nn.Sequential(\n            \n            nn.Conv2d(in_channels=3, out_channels=32, kernel_size=3, padding=1),  # (Batch, 32, 224, 224)\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(kernel_size=2, stride=2),  # (Batch, 32, 112, 112)\n            \n            \n            nn.Conv2d(32, 64, 3, padding=1),  # (Batch, 64, 112, 112)\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2, 2),  # (Batch, 64, 56, 56)\n            \n            \n            nn.Conv2d(64, 128, 3, padding=1),  # (Batch, 128, 56, 56)\n            nn.BatchNorm2d(128),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2, 2),  # (Batch, 128, 28, 28)\n            \n            \n            nn.Conv2d(128, 256, 3, padding=1),  # (Batch, 256, 28, 28)\n            nn.BatchNorm2d(256),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(2, 2),  # (Batch, 256, 14, 14)\n            \n        \n            nn.Conv2d(256, 512, 3, padding=1),  # (Batch, 512, 14, 14)\n            nn.BatchNorm2d(512),\n            nn.ReLU(inplace=True),\n            nn.AdaptiveAvgPool2d((1, 1))  # (Batch, 512, 1, 1)\n        )\n        \n       \n        self.flatten = nn.Flatten()\n        \n        # Fully Connected layer to reduce dimensionality\n        self.fc_cnn = nn.Linear(512, 256) \n        self.dropout_cnn = nn.Dropout(0.5)\n        \n        # -----------------------------\n        # LSTM Architecture\n        # -----------------------------\n        self.lstm = nn.LSTM(\n            input_size=256,  \n            hidden_size=hidden_dim,\n            num_layers=num_layers,\n            batch_first=True,\n            bidirectional=False,  \n            dropout=dropout if num_layers > 1 else 0\n        )\n        \n        # Fully Connected layer for classification\n        self.fc_lstm = nn.Linear(hidden_dim, num_classes)  \n        \n        # Dropout for LSTM output\n        self.dropout_lstm = nn.Dropout(dropout)\n    \n    def forward(self, x):\n        \"\"\"\n        Args:\n            x (Tensor): Input tensor of shape (Batch, 3, T, 224, 224)\n        \n        Returns:\n            out (Tensor): Output logits of shape (Batch, num_classes)\n        \"\"\"\n        batch_size, C, T, H, W = x.size()\n        \n        # Initialize a list to store CNN features for each frame\n        cnn_features = []\n        \n        for t in range(T):\n            frame = x[:, :, t, :, :]  \n            feature = self.cnn(frame)  \n            feature = self.flatten(feature)\n            feature = self.fc_cnn(feature) \n            feature = self.dropout_cnn(feature)\n            cnn_features.append(feature)\n        \n        cnn_features = torch.stack(cnn_features, dim=1)\n        \n        # Pass through LSTM\n        lstm_out, (hn, cn) = self.lstm(cnn_features)\n        \n        final_feature = hn[-1, :, :]  \n        \n        final_feature = self.dropout_lstm(final_feature)\n        \n        out = self.fc_lstm(final_feature) \n        \n        return out\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:51.159420Z","iopub.execute_input":"2024-10-11T14:28:51.159771Z","iopub.status.idle":"2024-10-11T14:28:51.176429Z","shell.execute_reply.started":"2024-10-11T14:28:51.159739Z","shell.execute_reply":"2024-10-11T14:28:51.175699Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"import torch.optim as optim\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")\n\nmodel = CNN_LSTM(\n    num_classes=2,      \n    hidden_dim=256,     \n    num_layers=2,       \n    dropout=0.5         \n)\nmodel = model.to(device)\n\n\nclass_weights = class_weight.compute_class_weight(\n    'balanced',\n    classes=np.unique(train_df['label']),\n    y=train_df['label']\n)\nclass_weights = torch.tensor(class_weights, dtype=torch.float).to(device)\n\n# Define loss function with class weights\ncriterion = nn.CrossEntropyLoss(weight=class_weights)\n\n# Define optimizer (all parameters are trainable)\noptimizer = optim.Adam(model.parameters(), lr=1e-3)\n\nscheduler = optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.1)","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:51.177554Z","iopub.execute_input":"2024-10-11T14:28:51.177850Z","iopub.status.idle":"2024-10-11T14:28:51.494957Z","shell.execute_reply.started":"2024-10-11T14:28:51.177819Z","shell.execute_reply":"2024-10-11T14:28:51.494187Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"Using device: cuda\n","output_type":"stream"}]},{"cell_type":"code","source":"from tqdm import tqdm\n\ndef train_model(model, train_loader, test_loader, criterion, optimizer, scheduler, num_epochs=25):\n    best_acc = 0.0\n    history = {'train_loss': [], 'train_acc': [], 'test_loss': [], 'test_acc': []}\n    \n    for epoch in range(num_epochs):\n        print(f'Epoch {epoch+1}/{num_epochs}')\n        print('-' * 10)\n        \n        # ---------------------\n        # Training Phase\n        # ---------------------\n        model.train()\n        running_loss = 0.0\n        running_corrects = 0\n        \n        for inputs, labels in tqdm(train_loader, desc='Training'):\n            inputs = inputs.to(device)     \n            labels = labels.to(device)      \n            \n            optimizer.zero_grad()\n            \n            outputs = model(inputs)        \n            _, preds = torch.max(outputs, 1) \n            loss = criterion(outputs, labels)\n            \n            loss.backward()\n            optimizer.step()\n            \n            running_loss += loss.item() * inputs.size(0)\n            running_corrects += torch.sum(preds == labels.data)\n        \n        epoch_train_loss = running_loss / len(train_loader.dataset)\n        epoch_train_acc = running_corrects.double() / len(train_loader.dataset)\n        \n        history['train_loss'].append(epoch_train_loss)\n        history['train_acc'].append(epoch_train_acc.item())\n        \n        print(f'Train Loss: {epoch_train_loss:.4f} Acc: {epoch_train_acc:.4f}')\n        \n        # ---------------------\n        # Testing Phase\n        # ---------------------\n        model.eval()\n        running_loss = 0.0\n        running_corrects = 0\n        \n        with torch.no_grad():\n            for inputs, labels in tqdm(test_loader, desc='Testing'):\n                inputs = inputs.to(device)\n                labels = labels.to(device)\n                \n                outputs = model(inputs)\n                _, preds = torch.max(outputs, 1)\n                loss = criterion(outputs, labels)\n                \n                running_loss += loss.item() * inputs.size(0)\n                running_corrects += torch.sum(preds == labels.data)\n        \n        epoch_test_loss = running_loss / len(test_loader.dataset)\n        epoch_test_acc = running_corrects.double() / len(test_loader.dataset)\n        \n        history['test_loss'].append(epoch_test_loss)\n        history['test_acc'].append(epoch_test_acc.item())\n        \n        print(f'Test Loss: {epoch_test_loss:.4f} Acc: {epoch_test_acc:.4f}')\n        \n        # ---------------------\n        # Checkpointing\n        # ---------------------\n        if epoch_test_acc > best_acc:\n            best_acc = epoch_test_acc\n            torch.save(model.state_dict(), 'best_model.pth')\n            print(\"Best model saved.\")\n        \n        # Step the scheduler\n        scheduler.step()\n        \n        print()\n    \n    print(f'Best Test Acc: {best_acc:.4f}')\n    return history\n\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:51.496341Z","iopub.execute_input":"2024-10-11T14:28:51.496670Z","iopub.status.idle":"2024-10-11T14:28:51.511600Z","shell.execute_reply.started":"2024-10-11T14:28:51.496636Z","shell.execute_reply":"2024-10-11T14:28:51.510729Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"def evaluate_model(model, dataloader, criterion):\n    model.eval()\n    running_loss = 0.0\n    running_corrects = 0\n    all_preds = []\n    all_labels = []\n    \n    with torch.no_grad():\n        for inputs, labels in tqdm(dataloader, desc='Evaluating'):\n            inputs = inputs.to(device)\n            labels = labels.to(device)\n            \n            outputs = model(inputs)\n            _, preds = torch.max(outputs, 1)\n            loss = criterion(outputs, labels)\n            \n            running_loss += loss.item() * inputs.size(0)\n            running_corrects += torch.sum(preds == labels.data)\n            \n            all_preds.extend(preds.cpu().numpy())\n            all_labels.extend(labels.cpu().numpy())\n    \n    epoch_loss = running_loss / len(dataloader.dataset)\n    epoch_acc = running_corrects.double() / len(dataloader.dataset)\n    \n    print(f'Evaluation Loss: {epoch_loss:.4f} Acc: {epoch_acc:.4f}')\n    \n    print(\"\\nClassification Report:\")\n    print(classification_report(all_labels, all_preds, target_names=['Non-Shoplifting', 'Shoplifting']))\n    \n    # Confusion Matrix\n    cm = confusion_matrix(all_labels, all_preds)\n    plt.figure(figsize=(6,6))\n    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\n    plt.title('Confusion Matrix')\n    plt.colorbar()\n    tick_marks = np.arange(2)\n    plt.xticks(tick_marks, ['Non-Shoplifting', 'Shoplifting'], rotation=45)\n    plt.yticks(tick_marks, ['Non-Shoplifting', 'Shoplifting'])\n    \n    thresh = cm.max() / 2.\n    for i, j in np.ndindex(cm.shape):\n        plt.text(j, i, format(cm[i, j], 'd'),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    \n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.tight_layout()\n    plt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:51.512737Z","iopub.execute_input":"2024-10-11T14:28:51.513075Z","iopub.status.idle":"2024-10-11T14:28:51.526739Z","shell.execute_reply.started":"2024-10-11T14:28:51.513043Z","shell.execute_reply":"2024-10-11T14:28:51.525950Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"num_epochs = 5\nhistory = train_model(model, train_loader, test_loader, criterion, optimizer, scheduler, num_epochs=num_epochs)\n\n\nmodel.load_state_dict(torch.load('best_model.pth'))\n\n\nevaluate_model(model, test_loader, criterion)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-11T14:28:51.527837Z","iopub.execute_input":"2024-10-11T14:28:51.528818Z","iopub.status.idle":"2024-10-11T14:42:03.071452Z","shell.execute_reply.started":"2024-10-11T14:28:51.528770Z","shell.execute_reply":"2024-10-11T14:42:03.070486Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"Epoch 1/5\n----------\n","output_type":"stream"},{"name":"stderr","text":"Training: 100%|██████████| 43/43 [02:01<00:00,  2.82s/it]\n","output_type":"stream"},{"name":"stdout","text":"Train Loss: 0.3888 Acc: 0.8097\n","output_type":"stream"},{"name":"stderr","text":"Testing: 100%|██████████| 11/11 [00:30<00:00,  2.78s/it]\n","output_type":"stream"},{"name":"stdout","text":"Test Loss: 0.9750 Acc: 0.6744\nBest model saved.\n\nEpoch 2/5\n----------\n","output_type":"stream"},{"name":"stderr","text":"Training: 100%|██████████| 43/43 [02:01<00:00,  2.83s/it]\n","output_type":"stream"},{"name":"stdout","text":"Train Loss: 0.1917 Acc: 0.9327\n","output_type":"stream"},{"name":"stderr","text":"Testing: 100%|██████████| 11/11 [00:30<00:00,  2.80s/it]\n","output_type":"stream"},{"name":"stdout","text":"Test Loss: 1.1534 Acc: 0.7442\nBest model saved.\n\nEpoch 3/5\n----------\n","output_type":"stream"},{"name":"stderr","text":"Training: 100%|██████████| 43/43 [02:02<00:00,  2.85s/it]\n","output_type":"stream"},{"name":"stdout","text":"Train Loss: 0.1269 Acc: 0.9649\n","output_type":"stream"},{"name":"stderr","text":"Testing: 100%|██████████| 11/11 [00:30<00:00,  2.80s/it]\n","output_type":"stream"},{"name":"stdout","text":"Test Loss: 0.2343 Acc: 0.9419\nBest model saved.\n\nEpoch 4/5\n----------\n","output_type":"stream"},{"name":"stderr","text":"Training: 100%|██████████| 43/43 [02:02<00:00,  2.84s/it]\n","output_type":"stream"},{"name":"stdout","text":"Train Loss: 0.1373 Acc: 0.9531\n","output_type":"stream"},{"name":"stderr","text":"Testing: 100%|██████████| 11/11 [00:30<00:00,  2.79s/it]\n","output_type":"stream"},{"name":"stdout","text":"Test Loss: 0.0093 Acc: 1.0000\nBest model saved.\n\nEpoch 5/5\n----------\n","output_type":"stream"},{"name":"stderr","text":"Training: 100%|██████████| 43/43 [01:59<00:00,  2.78s/it]\n","output_type":"stream"},{"name":"stdout","text":"Train Loss: 0.1200 Acc: 0.9707\n","output_type":"stream"},{"name":"stderr","text":"Testing: 100%|██████████| 11/11 [00:30<00:00,  2.75s/it]\n/tmp/ipykernel_30/3379309540.py:5: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  model.load_state_dict(torch.load('best_model.pth'))\n","output_type":"stream"},{"name":"stdout","text":"Test Loss: 0.6000 Acc: 0.7733\n\nBest Test Acc: 1.0000\n","output_type":"stream"},{"name":"stderr","text":"Evaluating: 100%|██████████| 11/11 [00:30<00:00,  2.81s/it]\n","output_type":"stream"},{"name":"stdout","text":"Evaluation Loss: 0.0093 Acc: 1.0000\n\nClassification Report:\n                 precision    recall  f1-score   support\n\nNon-Shoplifting       1.00      1.00      1.00       107\n    Shoplifting       1.00      1.00      1.00        65\n\n       accuracy                           1.00       172\n      macro avg       1.00      1.00      1.00       172\n   weighted avg       1.00      1.00      1.00       172\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x600 with 2 Axes>","image/png":""},"metadata":{}}]}]}